- name: Reset kubeadm cluster
  become: yes
  block:
  - name: Drain nodes
    kubernetes.core.k8s_drain:
      state: drain
      delete_options:
        delete_emptydir_data: yes
        force: yes
        ignore_daemonsets: yes
      name: "{{ item }}"
    with_items: "{{ groups.nodes }}"
    when: "'controlplane' in group_names"

  - name: Reset nodes
    command: "kubeadm reset -f"
    when: "'nodes' in group_names"

  - name: Reset iptables rules
    shell: "iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X"

  - name: Delete nodes
    kubernetes.core.k8s:
      state: absent
      api_version: v1
      kind: Node
      name: "{{ item }}"
    with_items: "{{ groups.nodes }}"
    when: "'controlplane' in group_names"

  - name: Reset controlplane
    command: "kubeadm reset -f"
    when:
    - "'controlplane' in group_names"
  when:
  - kubeadm_reset is defined
  - kubeadm_reset
  tags:
  - kubernetes/kubeadm/reset

- name: Set kubeadm cluster
  become: yes
  block:
  - name: Collect kuebadm init options
    set_fact:
      kubeadm_init_option: "--{{ item.key }}={{ item.value }}"
    with_items: "{{ kubeadm_init_options | dict2items }}"
    register: kubeadm_init_option_list
    when: "'controlplane' in group_names"

  - name: Reduce kubeadm init options to a string
    set_fact:
      kubeadm_init_option_str: "{{ kubeadm_init_option_list.results | map(attribute='ansible_facts.kubeadm_init_option') | join(' ') }}"
    when: "'controlplane' in group_names"

  - name: Initialize kubeadm in controlplane
    command: "kubeadm init {{ kubeadm_init_option_str }}"
    register: kubeadm_init_result
    until: kubeadm_init_result.stdout.find("Your Kubernetes control-plane has initialized successfully!")
    delay: 120
    retries: 1
    ignore_errors: "{{ ansible_check_mode }}"
    when: "'controlplane' in group_names"

  - name: Make directory for kube-config
    file:
      state: directory
      path: $HOME/.kube

  - name: Copy admin kube-config for root
    command: cp /etc/kubernetes/admin.conf $HOME/.kube/config
    when: "'controlplane' in group_names"

  - name: Create token for nodes
    command: "kubeadm token create --print-join-command --ttl 0"
    register: join_command
    delegate_to: "{{ groups.controlplane[0] }}"
    when: "'nodes' in group_names"

  - name: Join nodes to the cluster
    command: "{{ hostvars[inventory_hostname].join_command.stdout | trim + ' --cri-socket ' + kubeadm_init_options['cri-socket'] }}"
    when:
    - "'nodes' in group_names"
    - join_command.stdout != ""

  - name: Get the kubelet-config ConfigMaps
    kubernetes.core.k8s_info:
      kind: ConfigMap
      name: kubelet-config-1.23
      namespace: kube-system
    register: configmap_result
    when: "'controlplane' in group_names"

  - name: Patch serverTLSBootstrap to kubelet-config
    kubernetes.core.k8s_json_patch:
      kind: ConfigMap
      namespace: kube-system
      name: kubelet-config
      patch:
      - op: replace
        path: /data/kubelet
        value: "{{ configmap_result.resources[0].data.kubelet | from_yaml | combine({'serverTLSBootstrap': true }) | to_yaml }}"
    when:
    - "'controlplane' in group_names"
    - "configmap_result.resources | length > 0"

  - name: Get current kubelet config
    shell: cat /var/lib/kubelet/config.yaml
    register: kubelet_config

  - name: Add serverTLSBootstrap to kubelet config
    set_fact:
      kubelet_config: "{{ kubelet_config.stdout | from_yaml | combine({'serverTLSBootstrap': true}) | to_yaml(indent=2, width=1337) }}"

  - name: Copy new kubelet config
    copy:
      content: "{{ kubelet_config }}"
      dest: /var/lib/kubelet/config.yaml
      mode: "0644"
      owner: root
      group: root
    notify: restart kubelet

  - name: Flush handlers for restarting kubelets
    meta: flush_handlers

  - name: Wait graceful period for restarting kubelets and creating CSRs
    pause:
      seconds: 30

  - name: Get CSRs
    kubernetes.core.k8s_info:
      kind: CertificateSigningRequest
      api_version: certificates.k8s.io/v1
      field_selectors: spec.signerName=kubernetes.io/kubelet-serving
    register: csr_result
    when: "'controlplane' in group_names"

  - name: Show CSRs
    debug:
      msg: "{{ csr_result.resources | map(attribute='metadata.name') | list }}"
    when: "'controlplane' in group_names"

  - name: Approve CSRs
    command: "kubectl certificate approve {{ item }}"
    with_items: "{{ csr_result.resources | map(attribute='metadata.name') | list }}"
    when: "'controlplane' in group_names"

  when:
  - kubeadm_reset is not defined
  tags:
  - kubernetes/kubeadm/set
